---
title: "ArcGIS Data + Basic R Mapping"
author: "Skyler Elmstrom"
date: "`r Sys.Date()`"
format:
  html:
    toc: true
editor: visual
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## Introduction

### Requirements

You'll probably want to be familiar with or read/watch up on these topics before starting:

-   `tidyverse` syntax and its ecosystem of R packages i.e. `dplyr`, `stringr`, `ggplot2`, etc.
-   `sf` package for working with spatial data (gets even better with tidyverse)
-   Get setup and familiar with our agency's centralized GIS platform [GeoHUB](https://maps.doh.wa.lcl/portal/apps/sites/#/geohub/pages/about)
-   Look at the ESRI docs or consult the GIS team on using [ArcGIS Enterprise](https://www.esri.com/en-us/arcgis/products/arcgis-enterprise/windows-linux), [ArcGIS Online](https://www.esri.com/en-us/arcgis/products/arcgis-online/resources), and the [ArcGIS REST API](https://developers.arcgis.com/rest/)

### Optional Items

There are some other interesting resources not yet covered here you might look into for integrating web ArcGIS services and the data available from these platforms with R and Python:

-   ESRI's `R-ArcGIS Bridge` - <https://www.esri.com/en-us/arcgis/products/r-arcgis-bridge/get-started> - This is ESRIs direct integration solution for RStudio + ArcGIS software. It requires an ArcGIS license on your system to use ArcGIS's geoprocessing tools from RStudio but perhaps some features will work without having a license such as accessing content from ArcGIS Online or ArcGIS Enterprise. You'll also need to become familiar with how to make python packages accessible to your R environment with `reticulate` and the Conda package manager as the bridge requires at least the `arcgisbinding` python package. I think this is certainly a great option for ArcGIS power users, but maybe less applicable to R users. You decide!
-   `arcpullr` - <https://pfrater.github.io/arcpullr/> - Skip the fuss (maybe) with an R package that makes ArcGIS REST APIs more accessible. Check it out for me?

### Additional Resources

If you truly wish to be a spatial spelunker, then come back to absorb some of these resources:

-   [The Epidemiologist R Handbook](https://epirhandbook.com/en/)
-   [Spatial Data Science with Applications in R](https://r-spatial.org/book/)
-   [Big Book or R - Geospatial Chapter](https://www.bigbookofr.com/geospatial.html)

If none of these sources if information whet your appetite, please reach out to me! [skyler.elmstrom\@doh.wa.gov](mailto:skyler.elmstrom@doh.wa.gov)

## Load Dependencies

This Quart markdown works best if you acquired it by cloning its source repository from GitHub.

> File → New Project → Select 'Version Control' in the New Project Wizard → Select 'Git' → Copy the repository URL from GitHub into this wizard

```{r renv-restore}
# Restore packages from the renv lockfile used in this project
renv::restore()
```

```{r install-pak}
# install.packages("pak") # fast and secure package installer
```

```{r}
# pak::pkg_install(c("sf", "tidyverse")) # install meta packages for common spatial data needs
```

```{r load-packages}
library(dplyr) # tidyverse
library(ggplot2) # tidyverse
library(sf) # https://r-spatial.github.io/sf/
library(stringr) # tidyverse
```

## Load Some Spatial Data

Find some data in an ArcGIS portal!

-   <https://geo.wa.gov/datasets/wadnr>::wa-county-boundaries/about
-   <https://maps.doh.wa.lcl/portal/apps/sites/#/geohub/>

```{r}
# WA County Boundaries from DNR from API Resources GeoJSON endpoint here: https://geo.wa.gov/datasets/wadnr::wa-county-boundaries/about
url <- "https://gis.dnr.wa.gov/site3/rest/services/Public_Boundaries/WADNR_PUBLIC_Cadastre_OpenData/FeatureServer/11/query?where=1%3D1&outFields=JURISDICT_FIPS_DESG_CD,JURISDICT_NM,JURISDICT_LABEL_NM&outSR=4326&f=json"

# Load Data
wa_county <- sf::st_read(url)

# Get Some centroids for labelling if you'd like
wa_county_cent <- sf::st_centroid(wa_county)
```

## A Simple plot of spatial data we found online

Let's plot a simple map without a lot of modifications. I prefer starting with something minimal when mapping in R so I reuse this `ggplot2` code a lot between projects:

```{r}
wa_county_map <- ggplot() +
  geom_sf(data = wa_county, fill = "lightblue", color = "white") + # Plot county boundaries
  geom_sf_text(data = wa_county_cent, aes(label = JURISDICT_LABEL_NM), size = 3, color = "black") + # Plot centroids with labels
  theme_minimal() +
  labs(title = "Washington County Boundaries with Centroids")  +
  theme(
    axis.title.x = element_blank(),
    axis.title.y = element_blank(),
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    axis.text.x = element_blank(),
    axis.text.y = element_blank()
  )

wa_county_map
```

### Map Refinements v2

Let's Refine this map to look better:

-   Separating county labels with two words to two separate lines to fit in their polygons better
-   Individual adjustments to counties that have poor label placement -- i.e. Columbia, Garfield, Wahkiakum counties

```{r}
# Adjust two word counties to use a new line for each word to save space
wa_county_cent <- wa_county_cent %>%
  mutate(JURISDICT_LABEL_NM_n = str_replace(JURISDICT_LABEL_NM, " ", "\n"))

# We might also consider leader lines for counties that are small but have large names

# Adjust centroids so labels do not overlap using nudge_x and nudge_y
wa_county_map2 <- ggplot() +
  geom_sf(data = wa_county, fill = "lightpink", color = "white") + # Plot county boundaries
  geom_sf_text(data = wa_county_cent %>% filter(!JURISDICT_LABEL_NM %in% c("Columbia", "Garfield", "Wahkiakum")), 
               aes(label = JURISDICT_LABEL_NM_n), size = 3, color = "black") +
  geom_sf_text(data = wa_county_cent %>% filter(JURISDICT_LABEL_NM == "Columbia"), 
               aes(label = JURISDICT_LABEL_NM_n), size = 3, color = "black", nudge_y = 0.1) +
  geom_sf_text(data = wa_county_cent %>% filter(JURISDICT_LABEL_NM == "Garfield"), 
               aes(label = JURISDICT_LABEL_NM_n), size = 3, color = "black", nudge_y = 0.15) +
  geom_sf_text(data = wa_county_cent %>% filter(JURISDICT_LABEL_NM == "Wahkiakum"), 
               aes(label = JURISDICT_LABEL_NM_n), size = 3, color = "black", nudge_x = -0.3, nudge_y = -0.1) +
  theme_minimal() +
  labs(title = "Washington County Boundaries with Centroids")  +
  theme(
    axis.title.x = element_blank(),
    axis.title.y = element_blank(),
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    axis.text.x = element_blank(),
    axis.text.y = element_blank()
  )

wa_county_map2
```

### Map Refinements v3

This is looking better for visualization purposes but where did all the water go?! Why are the counties such a weird shape from what we are used to looking at? Let's fix that.

-   Add bordering Oregon and Idaho polygons
-   Add some marine areas within the legal county boundaries -- I think people are used to seeing WA this way rather than the full legal boundaries
-   Add and reorder the `geom_sf` layers so that the county lines, polygons, and labels overlap nicely
-   Create a boundary box to focus our map view on WA instead of WA + OR + ID

```{r}
# Get some other boundaries from ESRI living atlas: 

# NOTE: These endpoints won't work in R because its designed for ArcGIS use. We need to convert them to a REST API endpoint.
# See: https://community.esri.com/t5/gis-life-blog/accessing-arcgis-rest-services-using-r/ba-p/898451

# states <- sf::st_read("https://services.arcgis.com/P3ePLMYs2RVChkJx/arcgis/rest/services/USA_Census_States/FeatureServer")

states <- sf::st_read(paste0("https://services.arcgis.com/P3ePLMYs2RVChkJx/arcgis/rest/services/USA_Census_States/FeatureServer/", 0, "/query?where=1%3D1&outFields=*&f=geojson"))

# Get some marine and water bodies data
marine <- sf::st_read("data/marine.shp")

# Get extent of WA counties for focusing the output map frame
wa_bbox <- sf::st_bbox(wa_county)

```

```{r}
# Filter States to those touching WA
states_wa <- states %>% filter(STATE_NAME %in% c("Idaho", "Oregon"))
```

```{r}
wa_county_map3 <- ggplot() +
  geom_sf(data = states_wa, color = "white", fill = "lightgrey") +
  geom_sf(data = wa_county, fill = "lightpink", color = NA) + # Plot county boundaries
  geom_sf(data = marine, color = NA, fill = "lightblue2") +
  geom_sf(data = wa_county, fill = NA, color = "white") + # Plot county boundary lines over other polygon layers
  geom_sf_text(data = wa_county_cent %>% filter(!JURISDICT_LABEL_NM %in% c("Columbia", "Garfield", "Wahkiakum")), 
               aes(label = JURISDICT_LABEL_NM_n), size = 3, color = "black") +
  geom_sf_text(data = wa_county_cent %>% filter(JURISDICT_LABEL_NM == "Columbia"), 
               aes(label = JURISDICT_LABEL_NM_n), size = 3, color = "black", nudge_y = 0.1) +
  geom_sf_text(data = wa_county_cent %>% filter(JURISDICT_LABEL_NM == "Garfield"), 
               aes(label = JURISDICT_LABEL_NM_n), size = 3, color = "black", nudge_y = 0.15) +
  geom_sf_text(data = wa_county_cent %>% filter(JURISDICT_LABEL_NM == "Wahkiakum"), 
               aes(label = JURISDICT_LABEL_NM_n), size = 3, color = "black", nudge_x = -0.3, nudge_y = -0.1) +
  coord_sf(xlim = c(wa_bbox$xmin, wa_bbox$xmax), ylim = c(wa_bbox$ymin, wa_bbox$ymax)) + # Focus map on extent of county data only
  theme_minimal() +
  labs(title = "Washington State County Boundaries with Centroid Labelling")  +
  theme(
    axis.title.x = element_blank(), # Remove X axis label
    axis.title.y = element_blank(), # Remove Y axis label
    panel.grid.major = element_blank(), # Remove major grid lines
    panel.grid.minor = element_blank(), # Remove minor grid lines
    axis.text.x = element_blank(), # Remove X axis grid text
    axis.text.y = element_blank(), # Remove Y axis grid text
    theme(plot.title = element_text(hjust = 0.5)) # Centering the title
  )
  
wa_county_map3
```

## Expansion Ideas

-   Demo other R packages that assist with accessing ArcGIS data and geoprocessing tools?
-   R-based geoprocessing tools: clip, dissolve, union, merge, mask, etc.
-   Add basemaps
-   Interactive maps with `tmap`, `leaflet`, `AGOL`
-   Other capabilities of the [ArcGIS REST API](https://developers.arcgis.com/rest/) that make it an attractive way to get data
-   Sharable, reusable functions for common spatial tasks at WADOH
-   Reprojecting data for doing spatial analysis
